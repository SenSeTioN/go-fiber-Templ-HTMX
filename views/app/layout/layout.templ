package layout

type LayoutProps struct {
	Title           string
	MetaDescription string
	IsSwiper        bool
}

templ Layout(props LayoutProps) {
	<!DOCTYPE html>
	<html lang="ru">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<link rel="apple-touch-icon" sizes="180x180" href="/public/favicon/apple-touch-icon.png"/>
			<link rel="icon" type="image/png" sizes="32x32" href="/public/favicon/favicon-32x32.png"/>
			<link rel="icon" type="image/png" sizes="16x16" href="/public/favicon/favicon-16x16.png"/>
			<link rel="manifest" href="/public/favicon/site.webmanifest"/>
			<title>{ props.Title }</title>
			<link rel="preconnect" href="https://fonts.googleapis.com"/>
			<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin/>
			<link href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet"/>
			<script src="https://unpkg.com/htmx.org@2.0.4"></script>
			<link rel="stylesheet" href="/public/normalize.css"/>
			<link rel="stylesheet" href="/public/styles.css"/>
			if props.IsSwiper {
				<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css"/>
				<script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>
			}
			<meta name="description" content={ props.MetaDescription }/>
		</head>
		<body>
			{ children... }
		</body>
		if props.IsSwiper {
			<script>
				const progressCircle = document.querySelector(".autoplay-progress svg");
				const progressContent = document.querySelector(".autoplay-progress span");

				const swiper = new Swiper(".mySwiper", {
					spaceBetween: 30,
					centeredSlides: true,
					autoplay: {
						delay: 100000,
						disableOnInteraction: false,
					},
					pagination: {
						el: ".swiper-pagination",
						clickable: true,
						dynamicBullets: true,
					},
					navigation: {
						nextEl: ".swiper-button-next",
						prevEl: ".swiper-button-prev",
					},
					on: {
					autoplayTimeLeft(s, time, progress) {
						progressCircle.style.setProperty("--progress", 1 - progress);
						progressContent.textContent = `${Math.ceil(time / 1000)}s`;
					}
				}
				});
			</script>
		}
	</html>
}
